import type { NextPage } from 'next';
import Head from 'next/head';
import styles from '../styles/Home.module.css';
import { useState } from 'react';
import EthereumPayment from '../components/Payeth';
import { WagmiConfig, createConfig, configureChains, mainnet } from 'wagmi'
import { publicProvider } from 'wagmi/providers/public'
import { goerli, polygon } from '@wagmi/core/chains'
import ErcPayment from '../components/PayErc20';
import { RainbowKitProvider, Chain, getDefaultWallets } from '@rainbow-me/rainbowkit';
import { alchemyProvider } from 'wagmi/providers/alchemy';
import { QueryClient, QueryClientProvider } from 'react-query';
import BtcPayment from '../components/BtcPayment';
import Payment from '../components/Pay';


type CryptoConfig = {
  [key: string]: {
    name: string;
    address: string;
    decimals: number;
    chainName: string;
    tipo: string;
  };
};

const cryptoConfig: CryptoConfig = {
  USDC: {
    name: 'USDC',
    address: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',
    decimals: 6,
    chainName: 'Ethereum',
    tipo: 'erc',
  },
  USDT: {
    name: 'USDT',
    address: '0xdAC17F958D2ee523a2206206994597C13D831ec7',
    decimals: 6,
    chainName: 'Ethereum',
    tipo: 'erc',
  },
  DAI: {
    name: 'DAI',
    address: '0x6b175474e89094c44da98b954eedeac495271d0f',
    decimals: 18,
    chainName: 'Ethereum',
    tipo: 'erc',
  },
  SHIBA: {
    name: 'SHIBA INU',
    address: '0x95ad61b0a150d79219dcf64e1e6cc01f0b64c4ce',
    decimals: 18,
    chainName: 'Ethereum',
    tipo: 'erc',
  },
  APE: {
    name: 'APECOIN',
    address: '0x4d224452801aced8b2f0aebe155379bb5d594381',
    decimals: 18,
    chainName: 'Ethereum',
    tipo: 'erc',
  },
  USDCPol: {
    name: 'USDC (Polygon)',
    address: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',
    decimals: 6,
    chainName: 'Polygon',
    tipo: 'erc',
  },
  LINKGoerli: {
    name: 'Link Goerli',
    address: '0x326C977E6efc84E512bB9C30f76E30c160eD06FB',
    decimals: 18,
    chainName: 'Goerli',
    tipo: 'erc',
  },
  Ethereum: {
    name: 'Ethereum',
    address: 'NA',
    decimals: 0,
    chainName: 'Ethereum',
    tipo: 'native',
  },
  Bitcoin: {
    name: 'Bitcoin',
    address: 'NA',
    decimals: 0,
    chainName: 'Bitcoin',
    tipo: 'otro',
  },
  BCH: {
    name: 'Bitcoin Cash',
    address: 'NA',
    decimals: 0,
    chainName: 'Bitcoin Cash',
    tipo: 'otro'
  },
  MATIC: {
    name: 'Matic',
    address: 'NA',
    decimals: 0,
    chainName: 'Polygon',
    tipo: 'native'
  }
};
type InfoBackend = {
  [key: string]: {
    amount: string,
    address: string,
  };
};


let infoBackend: InfoBackend = {};
Object.keys(cryptoConfig).map((cryptoKey) => {
  const sape = {
    amount: '1',
    address: '0xd9279F6D53a3F77830f9692f396B386C88ff9Acc'
  }
  infoBackend[cryptoKey] = { ...sape };
})


const Home: NextPage = () => {
  const [selectedCrypto, setSelectedCrypto] = useState<string | null>(null);
  const [selectedCryptoConfig, setSelectedCryptoConfig] = useState<any | null>(null); // Estado para la configuraciÃ³n

  const handleCryptoSelection = (cryptoName: string) => {
    setSelectedCrypto(cryptoName);

    const config = cryptoConfig[cryptoName];
    setSelectedCryptoConfig(config);
  };

  const updateSelectedCrypto = (crypto: string) => {
    setSelectedCrypto(crypto);
  };

  const updateSelectedCryptoConfig = (config: any) => {
    setSelectedCryptoConfig(config);
  };


  const address = '0xd9279F6D53a3F77830f9692f396B386C88ff9Acc';
  const amount = 1.5;
  const queryClient = new QueryClient();

  // const evmCryptos = {
  //   'USDC':{
  //     name: 'usdc',
  //     address:'0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',
  //     decimals:6,
  //     chainid: 1
  //   }
  // }


  const { chains, publicClient, webSocketPublicClient } = configureChains(
    [mainnet, polygon, goerli],
    [
      alchemyProvider({ apiKey: '4_X4s7nBn9QjanSt9RnBUKN29Dg3rmxI' }),
      publicProvider()
    ]);

  const { connectors } = getDefaultWallets({
    appName: 'sape',
    projectId: '5cf6f60255e644e7ef5f619a00ad4dc6',
    chains
  });

  const config = createConfig({
    autoConnect: true,
    publicClient,
    webSocketPublicClient,
    connectors,
  });

  return (

    <div className={styles.container}>
      <QueryClientProvider client={queryClient}>
        <Head>
          <title>RainbowKit App</title>
          <meta
            content="Generated by @rainbow-me/create-rainbowkit"
            name="description"
          />
          <link href="/favicon.ico" rel="icon" />
        </Head>

        <main className={styles.main}>
          <div className="card">
            <div className="card-body">
              <img id="logo"
                src="https://static.wixstatic.com/media/d21184_5e901b6448424fcfb60b8b0779552538~mv2.png/v1/fill/w_744,h_744,al_c,q_90,usm_0.66_1.00_0.01,enc_auto/d21184_5e901b6448424fcfb60b8b0779552538~mv2.png" />
            </div>
          </div>
          { !selectedCrypto && 
          <>
            <form>
              <label>
                Seleccione una criptomoneda:
                <div>
                  {Object.keys(cryptoConfig).map((cryptoKey) => (
                    <button
                      key={cryptoKey}
                      onClick={(e) => {
                        e.preventDefault();
                        handleCryptoSelection(cryptoKey);
                      }}
                      style={{
                        backgroundColor:
                          selectedCrypto === cryptoKey ? 'lightblue' : 'white',
                      }}
                    >
                      {cryptoConfig[cryptoKey].name}
                    </button>
                  ))}
                </div>
              </label>
            </form>
            </>
          }
          <WagmiConfig config={config}>
            <RainbowKitProvider chains={chains}>
              {selectedCrypto &&
                <>
                  <Payment infoBackend={infoBackend} selectedCryptoConfig={selectedCryptoConfig} selectedCrypto={selectedCrypto} updateSelectedCrypto={updateSelectedCrypto}
        updateSelectedCryptoConfig={updateSelectedCryptoConfig} />
                </>}

            </RainbowKitProvider>
          </WagmiConfig>
        </main>

        <footer className={styles.footer}>
        </footer>

      </QueryClientProvider>


    </div>

  );
};

export default Home;
